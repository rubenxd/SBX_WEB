@page "/VentaPage"
@using SBX_WEB.Data
@using Radzen;
@inject VentaServicio ventaServicio
@inject DialogService dialogService
@inject NavigationManager NavigationManager

<div class="row">
    <div class="col-md-6">
        <div class="row">
            <div class="col-1">
                <RadzenButton Icon="add" ButtonStyle="ButtonStyle.Secondary" Click="@Registro" Text="" />
            </div>
            <div class="col-1">
                <RadzenButton Icon="update" ButtonStyle="ButtonStyle.Secondary" Click="@Actualizar" Text="" />
            </div>
        </div>
    </div>
</div>
<br />
<RadzenDataGrid @ref="ordersGrid" AllowFiltering="true" AllowPaging="true" PageSize="6" AllowSorting="true"
                Data="@VentaObj" TItem="Venta" AllowColumnResize="true" IsLoading=@isLoading>
    <Columns>
        <RadzenDataGridColumn TItem="Venta" Property="Fecha" Title="Fecha" Width="80px" />
        <RadzenDataGridColumn TItem="Venta" Property="NombreDocumento" Title="NombreDocumento" Width="140px" />
        <RadzenDataGridColumn TItem="Venta" Property="ConsecutivoDocumento" Title="ConsecutivoDocumento" Width="140px" />
        <RadzenDataGridColumn TItem="Venta" Property="ProductoId" Title="ProductoId" Width="120px" />
        @*<RadzenDataGridColumn Width="50px" TItem="Producto" Property="Id" Title="">
            <Template Context="data">
                <RadzenButton Icon="create" ButtonStyle="ButtonStyle.Secondary" Class="m-1" Click=@(() => Editar(data.Id,data.Referencia,data.Nombre)) />
            </Template>
        </RadzenDataGridColumn>*@
        <RadzenDataGridColumn Width="50px" TItem="Venta" Property="Id" Title="">
            <Template Context="data">
                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Class="m-1" Click=@(() => ShowInlineDialog(data.Id,data.NombreDocumento,data.ConsecutivoDocumento.ToString())) />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    RadzenDataGrid<Venta> ordersGrid;
    bool isLoading = false;
    bool resultDialog;
    int IdGlobal = 0;
    List<Data.Venta> VentaObj = new List<Data.Venta>();
    Data.Venta VentaObjEliminar = new Data.Venta();

    List<Data.Venta> ProductoObjVerificar = new List<Data.Venta>();
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        VentaObj = await Task.Run(() => ventaServicio.GetAllVentaAsync());
        ProductoObjVerificar = VentaObj;
        isLoading = false;
    }
    async Task Editar(int Id, string referencia, string Nombre)
    {
        await dialogService.OpenAsync<ProductoEditarPage>($"{Id} - {Nombre}",
               new Dictionary<string, object>() { { "Id", Id } },
               new DialogOptions() { Width = "60%", Height = "85%" });
        NavigationManager.NavigateTo("ProductoPage", true);
    }
    async Task Registro()
    {
        await dialogService.OpenAsync<ProductoCrearPage>($"",
               new Dictionary<string, object>() { },
               new DialogOptions() { Width = "60%", Height = "85%" });
        await Actualizar();
    }
    async Task Actualizar()
    {
        isLoading = true;
        VentaObj = await Task.Run(() => ventaServicio.GetAllVentaAsync());
        isLoading = false;
    }

    async Task Eliminar(int Id, string NombreDocumento, string ConsecutivoDocumento)
    {
        VentaObjEliminar = await Task.Run(() => ventaServicio.GetVentaAsync(Id));
        await ventaServicio.EliminarVentaAsync(VentaObjEliminar);
        await Actualizar();
    }
    async Task ShowInlineDialog(int Id, string NombreDocumento, string ConsecutivoDocumento)
    {
        var result = await dialogService.OpenAsync("Confirmacion", ds =>
    @<div>
        <p class="mb-4">Esta seguro de elimiar la venta  <b>@NombreDocumento</b><b>-</b><b>@ConsecutivoDocumento</b> ?</p>
        <div class="row">
            <div class="col">
                <RadzenButton Text="Ok" Click="() => ds.Close(true)" Class="mr-1" Style="width: 80px;" />
                <RadzenButton Text="Cancelar" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Class="mr-1" />
            </div>
        </div>
    </div>
    );

        if (result == null)
        {
            result = false;
        }
        if (result)
        {
            await Eliminar(Id, NombreDocumento, ConsecutivoDocumento);
        }
    }
}
