// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace SBX_WEB.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Ruben\SBX_WEB\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Ruben\SBX_WEB\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Ruben\SBX_WEB\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Ruben\SBX_WEB\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Ruben\SBX_WEB\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Ruben\SBX_WEB\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Ruben\SBX_WEB\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Ruben\SBX_WEB\_Imports.razor"
using SBX_WEB;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Ruben\SBX_WEB\_Imports.razor"
using SBX_WEB.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Ruben\SBX_WEB\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Ruben\SBX_WEB\Pages\VentaCrearPage.razor"
using SBX_WEB.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Ruben\SBX_WEB\Pages\VentaCrearPage.razor"
using Radzen;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/VentaCrearPage")]
    public partial class VentaCrearPage : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 161 "C:\Ruben\SBX_WEB\Pages\VentaCrearPage.razor"
      
    public string InputValue { get; set; }
    RadzenDataGrid<Producto> grid;
    bool isLoading = false;
    List<Data.Producto> lstProd = new List<Data.Producto>();
    public string ClienteDNI { get; set; }
    List<Data.Cliente> ClienteObj = new List<Data.Cliente>();
    public decimal TotalFacturar { get; set; }
    public decimal Efectivo { get; set; }
    //public decimal Cambio { get; set; }
    Data.Producto LstObjBuscados = new Data.Producto();
    string IdTemp = "";
    public decimal total { get; set; } = 0;
    Producto orderToInsert;
    public int ClienteId { get; set; }
    string mensaje = "";
    public decimal Cambio { get; set; }
    public decimal ValidaGuardar { get; set; }
    string datovlidar = "";

    protected override async Task OnInitializedAsync()
    {
        ClienteObj = await Task.Run(() => clienservicio.GetAllClienteAsync());
    }
    async Task AgregarProducto()
    {
        isLoading = true;
        int verificacionIgual = 0;
        if (this.InputValue != "" && this.InputValue != null)
        {
            verificacionIgual = 0;
            if (InputValue.All(char.IsDigit))
            {
                LstObjBuscados = await Task.Run(() => Productoservicio.GetProductoAsync(Convert.ToInt32(this.InputValue)));
                if (LstObjBuscados != null)
                {
                    if (IdTemp == "")
                    {
                        LstObjBuscados.DescuentoP = 0;
                        LstObjBuscados.Cantidad = 1;
                        LstObjBuscados.Total = LstObjBuscados.PrecioVenta;
                        lstProd.Add(LstObjBuscados);
                    }
                    else
                    {
                        foreach (var item in lstProd)
                        {
                            if (item.Id == Convert.ToInt32(this.InputValue))
                            {
                                verificacionIgual++;
                            }
                        }
                        if (verificacionIgual > 0)
                        {
                            LstObjBuscados.Cantidad++;
                            total = LstObjBuscados.Cantidad * LstObjBuscados.PrecioVenta;
                            LstObjBuscados.Total = total;
                        }
                        else
                        {
                            LstObjBuscados.DescuentoP = 0;
                            LstObjBuscados.Cantidad = 1;
                            LstObjBuscados.Total = LstObjBuscados.PrecioVenta;
                            lstProd.Add(LstObjBuscados);
                        }
                    }
                    IdTemp = InputValue;
                }
                else
                {
                    LstObjBuscados = await Task.Run(() => Productoservicio.GetProductoReferenciaAsync(this.InputValue));
                    if (LstObjBuscados != null)
                    {
                        if (IdTemp == "")
                        {
                            LstObjBuscados.DescuentoP = 0;
                            LstObjBuscados.Cantidad = 1;
                            LstObjBuscados.Total = LstObjBuscados.PrecioVenta;
                            lstProd.Add(LstObjBuscados);
                        }
                        else
                        {
                            foreach (var item in lstProd)
                            {
                                if (item.Referencia == this.InputValue)
                                {
                                    verificacionIgual++;
                                }
                            }
                            if (verificacionIgual > 0)
                            {
                                LstObjBuscados.Cantidad++;
                                total = LstObjBuscados.Cantidad * LstObjBuscados.PrecioVenta;
                                LstObjBuscados.Total = total;
                            }
                            else
                            {
                                LstObjBuscados.DescuentoP = 0;
                                LstObjBuscados.Cantidad = 1;
                                LstObjBuscados.Total = LstObjBuscados.PrecioVenta;
                                lstProd.Add(LstObjBuscados);
                            }
                        }
                    }
                    IdTemp = InputValue;
                }
            }
            else
            {
                LstObjBuscados = await Task.Run(() => Productoservicio.GetProductoReferenciaAsync(this.InputValue));
                if (LstObjBuscados != null)
                {
                    if (IdTemp == "")
                    {
                        LstObjBuscados.DescuentoP = 0;
                        LstObjBuscados.Cantidad = 1;
                        LstObjBuscados.Total = LstObjBuscados.PrecioVenta;
                        lstProd.Add(LstObjBuscados);
                    }
                    else
                    {
                        foreach (var item in lstProd)
                        {
                            if (item.Referencia == this.InputValue)
                            {
                                verificacionIgual++;
                            }
                        }
                        if (verificacionIgual > 0)
                        {
                            LstObjBuscados.Cantidad++;
                            total = LstObjBuscados.Cantidad * LstObjBuscados.PrecioVenta;
                            LstObjBuscados.Total = total;
                        }
                        else
                        {
                            LstObjBuscados.DescuentoP = 0;
                            LstObjBuscados.Cantidad = 1;
                            LstObjBuscados.Total = LstObjBuscados.PrecioVenta;
                            lstProd.Add(LstObjBuscados);
                        }
                    }
                }
                IdTemp = InputValue;
            }
        }
        if (LstObjBuscados != null)
        {
            InputValue = "";
        }
        await grid.Reload();
        TotalFacturar = 0;
        foreach (var item in lstProd)
        {
            TotalFacturar += item.Total;
        }
        calculo();
        isLoading = false;
    }
    async Task Enter(KeyboardEventArgs e)
    {
        isLoading = true;
        int verificacionIgual = 0;
        if (this.InputValue != "" && this.InputValue != null)
        {
            if (e.Key == "Enter")
            {
                verificacionIgual = 0;
                if (InputValue.All(char.IsDigit))
                {
                    LstObjBuscados = await Task.Run(() => Productoservicio.GetProductoAsync(Convert.ToInt32(this.InputValue)));
                    if (LstObjBuscados != null)
                    {
                        if (IdTemp == "")
                        {
                            LstObjBuscados.Cantidad = 1;
                            LstObjBuscados.Total = LstObjBuscados.PrecioVenta;
                            lstProd.Add(LstObjBuscados);
                        }
                        else
                        {
                            foreach (var item in lstProd)
                            {
                                if (item.Id == Convert.ToInt32(this.InputValue))
                                {
                                    verificacionIgual++;
                                }
                            }
                            if (verificacionIgual > 0)
                            {
                                LstObjBuscados.Cantidad++;
                                total = LstObjBuscados.Cantidad * LstObjBuscados.PrecioVenta;
                                LstObjBuscados.Total = total;
                            }
                            else
                            {
                                LstObjBuscados.Cantidad = 1;
                                LstObjBuscados.Total = LstObjBuscados.PrecioVenta;
                                lstProd.Add(LstObjBuscados);
                            }
                        }
                        IdTemp = InputValue;
                    }
                    else
                    {
                        LstObjBuscados = await Task.Run(() => Productoservicio.GetProductoReferenciaAsync(this.InputValue));
                        if (LstObjBuscados != null)
                        {
                            if (IdTemp == "")
                            {
                                LstObjBuscados.Cantidad = 1;
                                LstObjBuscados.Total = LstObjBuscados.PrecioVenta;
                                lstProd.Add(LstObjBuscados);
                            }
                            else
                            {
                                foreach (var item in lstProd)
                                {
                                    if (item.Referencia == this.InputValue)
                                    {
                                        verificacionIgual++;
                                    }
                                }
                                if (verificacionIgual > 0)
                                {
                                    LstObjBuscados.Cantidad++;
                                    total = LstObjBuscados.Cantidad * LstObjBuscados.PrecioVenta;
                                    LstObjBuscados.Total = total;
                                }
                                else
                                {
                                    LstObjBuscados.Cantidad = 1;
                                    LstObjBuscados.Total = LstObjBuscados.PrecioVenta;
                                    lstProd.Add(LstObjBuscados);
                                }
                            }
                        }
                        IdTemp = InputValue;
                    }
                }
                else
                {
                    LstObjBuscados = await Task.Run(() => Productoservicio.GetProductoReferenciaAsync(this.InputValue));
                    if (LstObjBuscados != null)
                    {
                        if (IdTemp == "")
                        {
                            LstObjBuscados.Cantidad = 1;
                            LstObjBuscados.Total = LstObjBuscados.PrecioVenta;
                            lstProd.Add(LstObjBuscados);
                        }
                        else
                        {
                            foreach (var item in lstProd)
                            {
                                if (item.Referencia == this.InputValue)
                                {
                                    verificacionIgual++;
                                }
                            }
                            if (verificacionIgual > 0)
                            {
                                LstObjBuscados.Cantidad++;
                                total = LstObjBuscados.Cantidad * LstObjBuscados.PrecioVenta;
                                LstObjBuscados.Total = total;
                            }
                            else
                            {
                                LstObjBuscados.Cantidad = 1;
                                LstObjBuscados.Total = LstObjBuscados.PrecioVenta;
                                lstProd.Add(LstObjBuscados);
                            }
                        }
                    }
                    IdTemp = InputValue;
                }
            }
        }
        if (InputValue != null)
        {
            if (LstObjBuscados != null)
            {
                InputValue = "";
            }
        }

        await grid.Reload();
        TotalFacturar = 0;
        foreach (var item in lstProd)
        {
            TotalFacturar += item.Total;
        }
        calculo();
        isLoading = false;
    }
    protected async void CreateProducto()
    {
        if (lstProd.Count > 0)
        {         
            if (Efectivo >= TotalFacturar)
            {
                mensaje = "";
                List<Venta> lstProducVenta = new List<Venta>();
                Venta ProducVentaven = new Venta();
                foreach (var item in lstProd)
                {
                    ProducVentaven = new Venta();
                    ProducVentaven.Cantidad = item.Cantidad;
                    ProducVentaven.Costo = item.Costo;
                    ProducVentaven.PrecioVenta = item.PrecioVenta;
                    ProducVentaven.Total = item.Total;
                    ProducVentaven.Efectivo = Efectivo;
                    ProducVentaven.ModoVenta = item.ModoVenta;
                    if (item.ModoVenta == "Unidad")
                    {
                        ProducVentaven.UM = "UND";
                    }
                    else if (item.ModoVenta == "Pesaje")
                    {
                        ProducVentaven.UM = "Bulto";
                    }
                    else
                    {
                        ProducVentaven.UM = "Caja";
                    }
                    ProducVentaven.Movimiento = "SALIDA";
                    ProducVentaven.NombreDocumento = "F";
                    List<Venta> ProductovenObjDefecto = new List<Venta>();
                    ProductovenObjDefecto = await Task.Run(() => ventaServicio.GetAllVentaAsync());
                    int numCount = 0;
                    if (ProductovenObjDefecto.Count > 0)
                    {
                        numCount =
                     (from num in ProductovenObjDefecto
                      select num.ConsecutivoDocumento).Max();

                        numCount++;
                    }
                    else
                    {
                        numCount = 1;
                    }

                    ProducVentaven.ConsecutivoDocumento = numCount;
                    //ProducVentaven.FechaRegistro = DateTime.Now;
                    ProducVentaven.Descuento = 0;
                    Cliente ClienteObjC = new Cliente();
                    if (ClienteDNI == null)
                    {
                        Cliente ClienteObjDefecto = new Cliente();
                        ClienteObjDefecto = await Task.Run(() => clienservicio.GetClienteXNombreAsync("NA"));
                        ClienteId = ClienteObjDefecto.Id;
                    }
                    else
                    {
                        Cliente ClienteObjDefecto = new Cliente();
                        ClienteObjDefecto = await Task.Run(() => clienservicio.GetClienteXDNIAsync(ClienteDNI));
                        ClienteId = ClienteObjDefecto.Id;
                    }
                    ProducVentaven.ClienteId = ClienteId;
                    ProducVentaven.ProductoId = item.Id;
                    lstProducVenta.Add(ProducVentaven);
                }
                bool ok = true;
                foreach (var item in lstProducVenta)
                {
                    item.Id = 0;
                    ok = await ventaServicio.InsertVentaAsync(item);
                }
                lstProd.Clear();
                //await ShowInlineDialog("Correcto", "Venta registrada Correctamente");
                //await msgconfirma("","");
                NavigationManager.NavigateTo("VentaCrearPage", true);
            }
            else
            {
                //await ShowInlineDialog("Alerta", "Valor efectivo debe ser mayor o igual al total a facturar");
                mensaje = "Valor efectivo debe ser mayor o igual al total a facturar";
            }
        }
        else
        {
            //await ShowInlineDialog("informacion", "No hay informacion para facturar");
        }
    }
    async Task Actualizar()
    {
        ClienteObj = await Task.Run(() => clienservicio.GetAllClienteAsync());
    }
    async Task EditRow(Producto order)
    {
        await grid.EditRow(order);
        TotalFacturar = 0;
        foreach (var item in lstProd)
        {
            TotalFacturar += item.Total;
        }
        calculo();
    }
    async Task SaveRow(Producto order)
    {
        total = order.Cantidad * order.PrecioVenta;
        order.Total = total;
        await grid.UpdateRow(order);
        TotalFacturar = 0;
        foreach (var item in lstProd)
        {
            TotalFacturar += item.Total;
        }
        calculo();
    }
    void CancelEdit(Producto order)
    {
        if (order == orderToInsert)
        {
            orderToInsert = null;
        }
        total = order.Cantidad * order.PrecioVenta;
        order.Total = total;
        grid.CancelEditRow(order);
        TotalFacturar = 0;
        foreach (var item in lstProd)
        {
            TotalFacturar += item.Total;
        }
        calculo();
    }
    async Task DeleteRow(Producto order)
    {
        if (order == orderToInsert)
        {
            orderToInsert = null;
        }

        if (lstProd.Contains(order))
        {
            // For demo purposes only
            lstProd.Remove(order);

            // For production
            //dbContext.SaveChanges();

            await grid.Reload();
        }
        else
        {
            grid.CancelEditRow(order);
        }

        TotalFacturar = 0;
        foreach (var item in lstProd)
        {
            TotalFacturar += item.Total;
        }
        calculo();
    }
    protected ElementReference myDiv;
    void OnChange(decimal efect)
    {
        calculoValidador(efect);
    }
    void calculoValidador(decimal efect)
    {
        //ValidaGuardar = 0;
        Cambio = efect - TotalFacturar;

        if (Efectivo < TotalFacturar)
        {
            mensaje = "Valor efectivo debe ser mayor o igual al total";
            //ValidaGuardar++;
        }
        else
        {
            mensaje = "";
            CreateProducto();
        }
    }
    void calculo()
    {
        Cambio = Efectivo - TotalFacturar;
    }
    async Task ShowInlineDialog(string emcabezado, string Mensaje)
    {
        var result = await DialogService.OpenAsync(emcabezado, ds =>
    

#line default
#line hidden
#nullable disable
        (__builder2) => {
            __builder2.OpenElement(0, "div");
            __builder2.AddMarkupContent(1, "\r\n        ");
            __builder2.OpenElement(2, "p");
            __builder2.AddAttribute(3, "class", "mb-4");
#nullable restore
#line 646 "C:\Ruben\SBX_WEB\Pages\VentaCrearPage.razor"
__builder2.AddContent(4, Mensaje);

#line default
#line hidden
#nullable disable
            __builder2.CloseElement();
            __builder2.AddMarkupContent(5, "\r\n        ");
            __builder2.AddMarkupContent(6, "<div class=\"row\">\r\n            <div class=\"col\">\r\n                <RadzenButton Text=\"Ok\" Click=\"() => ds.Close(true)\" Class=\"mr-1\" Style=\"width: 80px;\"></RadzenButton>\r\n            </div>\r\n        </div>\r\n    ");
            __builder2.CloseElement();
        }
#nullable restore
#line 652 "C:\Ruben\SBX_WEB\Pages\VentaCrearPage.razor"
          );
    }
    async Task msgconfirma(string emcabezado, string Mensaje)
    {
        var result = await DialogService.Confirm("Are you sure?", "MyTitle", new ConfirmOptions() { OkButtonText = "Ok", CancelButtonText = "No" });
    }
    List<string> datos = new List<string>();
    private void Keypress(KeyboardEventArgs args)
    {
        var dato = args.Key;
        if (args.Key == "Backspace")
        {
            if (datos.Count > 0)
            {
                datos.RemoveAt(datos.Count - 1);
            }
        }
        else
        {
            if (dato.All(char.IsDigit))
            {
                datos.Add(dato);
            }
        }
        string resu = "";
        foreach (var item in datos)
        {
            resu += item;
        }
        if (resu== "")
        {
            resu = "0";
        }
        Cambio = Convert.ToDecimal(resu) - TotalFacturar;
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DialogService DialogService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private VentaServicio ventaServicio { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ClienteServicio clienservicio { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager uriHelper { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ProductoServicio Productoservicio { get; set; }
    }
}
#pragma warning restore 1591
