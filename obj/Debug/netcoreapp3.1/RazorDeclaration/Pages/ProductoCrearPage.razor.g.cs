// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace SBX_WEB.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Ruben\SBX_WEB\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Ruben\SBX_WEB\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Ruben\SBX_WEB\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Ruben\SBX_WEB\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Ruben\SBX_WEB\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Ruben\SBX_WEB\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Ruben\SBX_WEB\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Ruben\SBX_WEB\_Imports.razor"
using SBX_WEB;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Ruben\SBX_WEB\_Imports.razor"
using SBX_WEB.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Ruben\SBX_WEB\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Ruben\SBX_WEB\Pages\ProductoCrearPage.razor"
using SBX_WEB.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Ruben\SBX_WEB\Pages\ProductoCrearPage.razor"
using Radzen;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/ProductoCrearPage")]
    public partial class ProductoCrearPage : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 216 "C:\Ruben\SBX_WEB\Pages\ProductoCrearPage.razor"
       
    Producto producto = new Producto();
    Producto producto2 = new Producto();
    bool v_ok = true;
    double DNI_ = 0;
    double telefono_ = 0;
    double celular_ = 0;
    string IdUnidadMedida;
    string IdEstado;
    string IdCategoria;
    string IdMarca;
    string IdProveedor;
    string IdModoVenta;
    string IdMovimiento;
    List<Producto> Lstproducto = new List<Producto>();
    List<UnidadMedida> LstUnidadMedida = new List<UnidadMedida>();
    UnidadMedida unidadMedida = new UnidadMedida();
    List<Estado> LstEstado = new List<Estado>();
    Estado estado = new Estado();
    List<Categoria> LstCategoria = new List<Categoria>();
    Categoria categoria = new Categoria();
    List<Marca> lstMarca = new List<Marca>();
    Marca Marca = new Marca();
    List<Proveedor> lstProveedor = new List<Proveedor>();
    Proveedor Proveedor = new Proveedor();
    List<ModoVenta> lstModoVenta = new List<ModoVenta>();
    ModoVenta lModoVenta = new ModoVenta();
    List<Movimiento> lstMovimiento = new List<Movimiento>();
    Movimiento lMovimiento = new Movimiento();
    int v_validar = 0;

    protected override async Task OnInitializedAsync()
    {
        LstUnidadMedida = await Task.Run(() => unidadmedidaServicio.GetAllUnidadMedidaAsync());
        LstEstado = await Task.Run(() => estadoServicio.GetAllEstadoAsync());
        LstCategoria = await Task.Run(() => categoriaServicio.GetAllCategoriaAsync());
        lstMarca = await Task.Run(() => marcaServicio.GetAllMarcaAsync());
        lstProveedor = await Task.Run(() => proveedorServicio.GetAllProveedorAsync());
        lModoVenta.Id = 1;
        lModoVenta.Nombre = "Unidad";
        lstModoVenta.Add(lModoVenta);
        lMovimiento.Id = 1;
        lMovimiento.Nombre = "Entrada";
        lstMovimiento.Add(lMovimiento);
    }
    protected async void OnSubmit(Producto arg)
    {
        //validar Referencia
        if (arg.Referencia == null && arg.CodigoBarras == null)
        {
            unidadMedida = await Task.Run(() => unidadmedidaServicio.GetUnidadMedidaXNombreAsync(IdUnidadMedida));
            if (unidadMedida == null)
            {
                unidadMedida = await Task.Run(() => unidadmedidaServicio.GetUnidadMedidaXNombreAsync("UND"));
            }
            arg.IdunidadMedida = Convert.ToInt32(unidadMedida.Id);
            arg.unidadMedida = unidadMedida;
            estado = await Task.Run(() => estadoServicio.GetEstadoXNombreAsync(IdEstado));
            if (estado == null)
            {
                estado = await Task.Run(() => estadoServicio.GetEstadoXNombreAsync("Activo"));
            }
            arg.estado = estado;
            arg.Idestado = Convert.ToInt32(estado.Id);
            categoria = await Task.Run(() => categoriaServicio.GetcategoriaXnombreAsync(IdCategoria));
            if (categoria == null)
            {
                categoria = await Task.Run(() => categoriaServicio.GetcategoriaXnombreAsync("NA"));
            }
            arg.categoria = categoria;
            arg.IdCategoria = Convert.ToInt32(categoria.Id);
            Marca = await Task.Run(() => marcaServicio.GetMarcaXNombreAsync(IdMarca));
            if (Marca == null)
            {
                Marca = await Task.Run(() => marcaServicio.GetMarcaXNombreAsync("NA"));
            }
            arg.marca = Marca;
            arg.Idmarca = Convert.ToInt32(Marca.Id);
            Proveedor = await Task.Run(() => proveedorServicio.GetProveedorXNombreAsync(IdProveedor));
            if (Proveedor == null)
            {
                Proveedor = await Task.Run(() => proveedorServicio.GetProveedorXNombreAsync("NA"));
            }
            arg.proveedor = Proveedor;
            arg.Idproveedor = Convert.ToInt32(Proveedor.Id);
            if (IdModoVenta == null)
            {
                IdModoVenta = "Unidad";
            }
            arg.ModoVenta = IdModoVenta;
            if (IdMovimiento == null)
            {
                IdMovimiento = "Entrada";
            }
            arg.Movimiento = IdMovimiento;
            arg.FechaRegistro = DateTime.Now;

            Kardex kardex = new Kardex();
            kardex.IdProducto = arg.Id;
            kardex.Referencia = arg.Referencia;
            kardex.Nombre = arg.Nombre;
            kardex.Referencia = arg.Referencia;

            v_ok = await productoservicio.InsertProductoAsync(arg);
            if (v_ok)
            {
                NavigationManager.NavigateTo("ProductoPage");
            }
        }
        else
        {
            v_validar = 0;
            producto2 = await Task.Run(() => productoservicio.GetProductoXreferenciaAsync(arg.Referencia));

            if (producto2 == null)
            {
                v_validar = 0;
            }
            else
            {
                if (producto2.Referencia != null)
                {
                    v_validar++;
                    await ShowInlineDialog(arg.Referencia, "Referencia");
                }
            }

            if (v_validar == 0)
            {
                producto2 = await Task.Run(() => productoservicio.GetProductoXCodigoBarrasAsync(arg.CodigoBarras));
                if (producto2 == null)
                {
                    v_validar = 0;
                }
                else
                {
                    if (producto2.CodigoBarras != null)
                    {
                        v_validar++;
                        await ShowInlineDialog(arg.CodigoBarras, "Codigo barras");
                    }
                }
            }

            if (v_validar == 0)
            {
                unidadMedida = await Task.Run(() => unidadmedidaServicio.GetUnidadMedidaXNombreAsync(IdUnidadMedida));
                if (unidadMedida == null)
                {
                    unidadMedida = await Task.Run(() => unidadmedidaServicio.GetUnidadMedidaXNombreAsync("UND"));
                }
                arg.IdunidadMedida = Convert.ToInt32(unidadMedida.Id);
                arg.unidadMedida = unidadMedida;
                estado = await Task.Run(() => estadoServicio.GetEstadoXNombreAsync(IdEstado));
                if (estado == null)
                {
                    estado = await Task.Run(() => estadoServicio.GetEstadoXNombreAsync("Activo"));
                }
                arg.estado = estado;
                arg.Idestado = Convert.ToInt32(estado.Id);
                categoria = await Task.Run(() => categoriaServicio.GetcategoriaXnombreAsync(IdCategoria));
                if (categoria == null)
                {
                    categoria = await Task.Run(() => categoriaServicio.GetcategoriaXnombreAsync("NA"));
                }
                arg.categoria = categoria;
                arg.IdCategoria = Convert.ToInt32(categoria.Id);
                Marca = await Task.Run(() => marcaServicio.GetMarcaXNombreAsync(IdMarca));
                if (Marca == null)
                {
                    Marca = await Task.Run(() => marcaServicio.GetMarcaXNombreAsync("NA"));
                }
                arg.marca = Marca;
                arg.Idmarca = Convert.ToInt32(Marca.Id);
                Proveedor = await Task.Run(() => proveedorServicio.GetProveedorXNombreAsync(IdProveedor));
                if (Proveedor == null)
                {
                    Proveedor = await Task.Run(() => proveedorServicio.GetProveedorXNombreAsync("NA"));
                }
                arg.proveedor = Proveedor;
                arg.Idproveedor = Convert.ToInt32(Proveedor.Id);
                if (IdModoVenta == null)
                {
                    IdModoVenta = "Unidad";
                }
                arg.ModoVenta = IdModoVenta;
                if (IdMovimiento == null)
                {
                    IdMovimiento = "Entrada";
                }
                arg.Movimiento = IdMovimiento;
                arg.FechaRegistro = DateTime.Now;
                v_ok = await productoservicio.InsertProductoAsync(arg);
                if (v_ok)
                {
                    NavigationManager.NavigateTo("ProductoPage");
                }
            }
        }
    }
    async Task ShowInlineDialog(string Dato, string Mensaje)
    {
        var result = await dialogService.OpenAsync("Informacion", ds =>
    

#line default
#line hidden
#nullable disable
        (__builder2) => {
            __builder2.OpenElement(0, "div");
            __builder2.AddMarkupContent(1, "\r\n        ");
            __builder2.OpenElement(2, "p");
            __builder2.AddAttribute(3, "class", "mb-4");
#nullable restore
#line 420 "C:\Ruben\SBX_WEB\Pages\ProductoCrearPage.razor"
__builder2.AddContent(4, Mensaje);

#line default
#line hidden
#nullable disable
            __builder2.AddContent(5, ": ");
            __builder2.OpenElement(6, "b");
#nullable restore
#line 420 "C:\Ruben\SBX_WEB\Pages\ProductoCrearPage.razor"
__builder2.AddContent(7, Dato);

#line default
#line hidden
#nullable disable
            __builder2.CloseElement();
            __builder2.AddContent(8, " ya existe ");
            __builder2.CloseElement();
            __builder2.AddMarkupContent(9, "\r\n        ");
            __builder2.AddMarkupContent(10, "<div class=\"row\">\r\n            <div class=\"col\">\r\n                <RadzenButton Text=\"Ok\" Click=\"() => ds.Close(false)\" Class=\"mr-1\" Style=\"width: 80px;\"></RadzenButton>\r\n            </div>\r\n        </div>\r\n    ");
            __builder2.CloseElement();
            __builder2.AddMarkupContent(11, "\r\n");
        }
#nullable restore
#line 427 "C:\Ruben\SBX_WEB\Pages\ProductoCrearPage.razor"
    );

        if (result == null)
        {
            result = false;
        }
        if (result)
        {

        }
    }
    void Cancel()
    {
        NavigationManager.NavigateTo("ProductoPage");
    }
    void OnChange(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DialogService dialogService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ProveedorServicio proveedorServicio { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private MarcaServicio marcaServicio { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CategoriaServicio categoriaServicio { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private EstadoServicio estadoServicio { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private UnidadMedidaServicio unidadmedidaServicio { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ProductoServicio productoservicio { get; set; }
    }
}
#pragma warning restore 1591
